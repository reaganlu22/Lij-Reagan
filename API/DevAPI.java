package API;

import static Enumeration.Enumeration.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 * Lasted Updated: 11/21/19
 * FOR DEVELOPMENT USE AND FAILOVER ONLY
 * Returns manually calculated/estimated results to API requests to reduce API calls during development and provide error mitigation during deployment.
 * @author Stephen Hampson
 */
public class DevAPI {
    /**
     * Allows access to the private test methods.
     * @param _testType Integer select which test to run
     * @param _code The IATA code of the location to be tested destination airport or city.
     * @return a string indicating whether the test passed or failed.
     * @throws IOException
     */
    public static String getBlackboxResult(int _testType, String _code) throws IOException{
        //Direct request to proper test or return as a fail.
        switch (_testType) {
            case FLIGHT_TESTING:
                return blackboxTesting1(_code);
            case HOTEL_TESTING:
                return blackboxTesting2(_code);
            default:
                return "Fail";
        }
    }

    /**
     * Estimates the flight cost to a given destination based on values researched on 11/10/19.
     * Base values are the lowest flight price found and the range value is 2 times the difference between the average of 5+ values and the base.
     * Individual estimations are generated by multiplying the range value by a double between 1 and 0 and adding the result to the base cost.
     *
     * @param _originAirport The origin airports IATA airport code.
     * @param _destinationAirport The destination airports IATA airport code.
     * @param _departureDate The departure date.
     * @return Returns an average flight cost as a double.
     * @throws IOException
     */
    static double getExpectedFlightCost (String _originAirport, String _destinationAirport, String _departureDate) throws IOException{
        double averageby = 5.00;
        double total = 0;

        //Get stored values from text file.
        double[] flightRange = getRange(FLIGHT_RANGE_FILEPATH, _destinationAirport);
        double base = flightRange[0];
        double range = flightRange[1];

        //Create 5 random flight prices from the given base and range values.
        for(int i = 0; i < averageby; i++){
            total += (base + (Math.random() * range));
        }

        //Return the average.
        return total / averageby;
    }

    /**
     * Estimates the Hotel in a given destination based on values researched on 11/10/19.
     * Base values are the lowest hotel price per night found and the range value is 2 times the difference between the average of 5+ values and the base.
     * Individual estimations are generated by multiplying the range value by a double between 1 and 0 and adding the result to the base cost.
     *
     * @param _citycode The IATA city code of the destination city.
     * @return Returns an average hotel cost per night as a double.
     * @throws IOException
     */
    static double getExpectedHotelCost(String _citycode) throws IOException{
        double averageby = 5.00;
        double total = 0;

        //Get stored values from text file.
        double[] hotelRange = getRange(HOTEL_RANGE_FILEPATH, _citycode);
        double base = hotelRange[0];
        double range = hotelRange[1];

        //Create five random hotel room prices from the given base and ranges values.
        for(int i = 0; i < averageby; i++){
            total += (base + (Math.random() * range));
        }

        //Retunr the average.
        return total / averageby;
    }

    /**
     * Takes the users location as a paired latitude and longitude and returns the default major airport.
     *
     * @param _latitude The users local latitude.
     * @param _longitude The users local longitude
     * @return The default IATA airport code.
     */
    static String getAirportCode (double _latitude, double _longitude){
        //Return a known airport code near this programs development site.
        return "GSO";
    }


    /**
     * Private method reads the developer hotel and flight pricing files to find the preset base price and range values.
     *
     * @param _filepath The filepath of the file to be read. Allows the same method to be used for hotel and flight pricing.
     * @param _code The IATA city or airport code to be searched for depending on calling method.
     * @return returns the base and range values as a double array, base price first, and range second.
     * @throws FileNotFoundException
     * @throws IOException
     */
    private static double[] getRange(String _filepath, String _code) throws FileNotFoundException, IOException{
        //Create variable storage.
        String[] input = null;
        double[] result = new double[2];

        //Create the file reader for the given filepath.
        File inputFile = new File(_filepath);
        BufferedReader br = new BufferedReader(new FileReader(inputFile));

        String str;
        while ((str = br.readLine()) != null){
            //Split the input line.
            input = str.split("\t");
            //If value read from the file matches the value being searched for...
            if (_code.equals(input[0])){
                //...read the base and reange value from the file...
                String base = input[1];
                String range = input[2];

                //...and package them for return.
                result[0] = Double.parseDouble(base);
                result[1] = Double.parseDouble(range);
            }
        }
        //Return the stored values.
        return result;
    }

    /**
     * Test the accuracy of DevAPI in generating random flight costs based on the stored base and range values.
     *
     * @param _airportCode The IATA city code of the location to be tested.
     * @return Whether the test passes or fails as a string.
     * @throws IOException
     */
    private static String blackboxTesting1 (String _airportCode) throws IOException{
        //Variable to track how many tests have been run.
        int count = 0;
        //Variable to store the total costs returned.
        int total = 0;
        //Get the locatoins base and range from file to calculate the expected average value.
        double[] range = getRange(FLIGHT_RANGE_FILEPATH, _airportCode);
        double expected = range[0] + 0.5 * range[1];

        //Run the test 1000 times.
        while (count < 1000){
            //Add the rreturned value to the total.
            total += getExpectedFlightCost("GSO", _airportCode, TEST_DATE);
            //Increment the count.
            count++;
        }
        double result = total / 1000.0;
        //System.out.println("Expected: " + expected + " | Result: " + result);
        //If the actual result is within +- 5% the test passes.
        if (result <= (1.05 * expected) && result >= (0.95 * expected)) {
            return "Pass";
        }
        //Otherwise the test fails.
        return "Fail";
    }

    /**
     * Test the accuracy of DevAPI in generating random hotel costs based on the stored base and range values.
     *
     * @param _cityCode The IATA city code of the location to be tested.
     * @return Whether the test passes or fails as a string.
     * @throws IOException
     */
    private static String blackboxTesting2 (String _cityCode) throws IOException{
        //Variable to track how many tests have been run.
        int count = 0;
        //Variable to store the total costs returned.
        int total = 0;
        //Get the locatoins base and range from file to calculate the expected average value.
        double[] range = getRange(HOTEL_RANGE_FILEPATH, _cityCode);
        double expected = range[0] + 0.5 * range[1];

        //Run the test 1000 times.
        while (count < 1000){
            //Add the rreturned value to the total.
            total += getExpectedHotelCost(_cityCode);
            //Increment the count.
            count++;
        }
        //Calcualte the actual result
        double result = total / 1000.0;
        //System.out.println("Expected: " + expected + " | Result: " + result);
        //If the actual result is within +- 5% the test passes.
        if (result <= (1.05 * expected) && result >= (0.95 * expected)) {
            return "Pass";
        }
        //Otherwise the test fails.
        return "Fail";
    }
}
